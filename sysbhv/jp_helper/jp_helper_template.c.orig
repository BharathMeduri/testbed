/*
 * This is a simple "template" for writing your own JProbes.
 * The basic idea:
 * *Copy* this C source file as is, calling it by a different name of course, 
 * and then modify it as instructed below to attach your jprobe(s).
 * That's it! Enjoy!
 *
 * For more information on theory of operation of jprobes, see
 * Documentation/kprobes.txt
 *
 * Kaiwan N Billimoria
 * <kaiwan -at- designergraphix -dot- com>
 * [L]GPL.
 */
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/kprobes.h>
#include <linux/interrupt.h>
#include "convenient.h"

#define MYNAME "jp_helper"

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//#include <linux/whatever.h>



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#if 1   // idea is to modify this silly template & then hv it work for something particular :)
/*
 * Jumper probe template for xxx
 *
 * THE THING TO DO:
 * Replace 'xxx' below with the name of the routine you are jprobe-ing !
 * Eg. (in vim): <Esc>:1,$s/xxx/netif_rx/g     <-- replaces all 'xxx' with 'netif_rx' !
 * 
 * Mirror principle enables access to arguments of the probed routine
 * from the probe handler.
 */
static <ret type> jp_xxx( /* ... params ... */ )
{
#if 1
	if (printk_ratelimit())
		printk(KERN_INFO "JP %s:%d: process ctx %s:%d. Intr? %c.\n",
			__FUNCTION__, __LINE__, current->comm, current->pid, in_interrupt()?'y':'n');
#endif


	/* Always end with a call to jprobe_return(). */
	jprobe_return();
	return <something>;
}
#endif



/* Idea is to modify this silly template & then hv it work for something particular :)
 * THE THING TO DO:
 * Replace 'xxx' below with the name of the routine you are jprobe-ing !
 * Eg. (in vim): <Esc>:1,$s/xxx/netif_rx/g     <-- replaces all 'xxx' with 'netif_rx' !
 */
static struct jprobe jps_xxx = {
	.entry			= jp_xxx,
	.kp = {
		.symbol_name	= "xxx",
	},
};

static int __init jprobe_init(void)
{
	int ret;

	ret = register_jprobe(&jps_xxx);
	if (ret < 0) {
		printk(KERN_INFO "register_jprobe failed, returned %d\n", ret);
		return -1;
	}

	printk(KERN_INFO "%s: Jprobe(s) registered.\n", MYNAME);
	return 0;
}

static void __exit jprobe_exit(void)
{
	unregister_jprobe(&jps_xxx);
	printk(KERN_INFO "%s: Jprobe(s) unregistered\n", MYNAME);
}

module_init(jprobe_init);
module_exit(jprobe_exit);
MODULE_LICENSE("GPL");

